{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/kubraterz/exercise-your-first-machine-learning-model?scriptVersionId=224434903\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","metadata":{},"source":["## Recap\n"]},{"cell_type":"code","execution_count":1,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T11:58:27.792094Z","iopub.status.busy":"2025-02-25T11:58:27.791812Z","iopub.status.idle":"2025-02-25T11:58:27.822998Z","shell.execute_reply":"2025-02-25T11:58:27.821854Z","shell.execute_reply.started":"2025-02-25T11:58:27.792032Z"}},"outputs":[{"name":"stdout","output_type":"stream","text":["Setup Complete\n"]}],"source":["# Code you have previously used to load data\n","import pandas as pd\n","\n","# Path of the file to read\n","iowa_file_path = '../input/home-data-for-ml-course/train.csv'\n","\n","home_data = pd.read_csv(iowa_file_path)\n","\n","# Set up code checking\n","from learntools.core import binder\n","binder.bind(globals())\n","from learntools.machine_learning.ex3 import *\n","\n","print(\"Setup Complete\")"]},{"cell_type":"markdown","metadata":{},"source":["# Exercises\n","\n","## Step 1: Specify Prediction Target\n","Select the target variable, which corresponds to the sales price. Save this to a new variable called `y`. You'll need to print a list of the columns to find the name of the column you need.\n"]},{"cell_type":"code","execution_count":2,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:00:25.987893Z","iopub.status.busy":"2025-02-25T12:00:25.987651Z","iopub.status.idle":"2025-02-25T12:00:25.992356Z","shell.execute_reply":"2025-02-25T12:00:25.991551Z","shell.execute_reply.started":"2025-02-25T12:00:25.98785Z"}},"outputs":[{"name":"stdout","output_type":"stream","text":["Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n","       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n","       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n","       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n","       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n","       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n","       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n","       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n","       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n","       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n","       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n","       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n","       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n","       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n","       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n","       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n","       'SaleCondition', 'SalePrice'],\n","      dtype='object')\n"]}],"source":["# print the list of columns in the dataset to find the name of the prediction target\n","print(home_data.columns)"]},{"cell_type":"code","execution_count":3,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:04:32.430431Z","iopub.status.busy":"2025-02-25T12:04:32.429831Z","iopub.status.idle":"2025-02-25T12:04:32.433937Z","shell.execute_reply":"2025-02-25T12:04:32.433279Z","shell.execute_reply.started":"2025-02-25T12:04:32.430049Z"}},"outputs":[],"source":["#y \n","y = home_data[\"SalePrice\"]\n"]},{"cell_type":"code","execution_count":4,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:04:39.603096Z","iopub.status.busy":"2025-02-25T12:04:39.602837Z","iopub.status.idle":"2025-02-25T12:04:39.610766Z","shell.execute_reply":"2025-02-25T12:04:39.610126Z","shell.execute_reply.started":"2025-02-25T12:04:39.603037Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"learnTutorialId\": 84, \"questionId\": \"1_SetTarget\", \"learnToolsVersion\": \"0.2.2\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#33cc33\">Correct</span>"],"text/plain":["Correct"]},"metadata":{},"output_type":"display_data"}],"source":["# for check in,\n","# kontrol i√ßin\n","step_1.check()"]},{"cell_type":"code","execution_count":5,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:06:19.143341Z","iopub.status.busy":"2025-02-25T12:06:19.143046Z","iopub.status.idle":"2025-02-25T12:06:19.150529Z","shell.execute_reply":"2025-02-25T12:06:19.14969Z","shell.execute_reply.started":"2025-02-25T12:06:19.143302Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"learnTutorialId\": 84, \"questionId\": \"1_SetTarget\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#3366cc\">Hint:</span> Use `print(home_data.columns)`. The column you want is at the end of the list. Use the dot notation to pull out this column from the DataFrame"],"text/plain":["Hint: Use `print(home_data.columns)`. The column you want is at the end of the list. Use the dot notation to pull out this column from the DataFrame"]},"metadata":{},"output_type":"display_data"}],"source":["# The lines below will show you a hint or the solution.\n","# step_1.hint() \n","# step_1.solution()\n","step_1.hint() \n"]},{"cell_type":"code","execution_count":6,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:06:57.631225Z","iopub.status.busy":"2025-02-25T12:06:57.630941Z","iopub.status.idle":"2025-02-25T12:06:57.637747Z","shell.execute_reply":"2025-02-25T12:06:57.63669Z","shell.execute_reply.started":"2025-02-25T12:06:57.63118Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"learnTutorialId\": 84, \"questionId\": \"1_SetTarget\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#33cc99\">Solution:</span> \n","```python\n","y = home_data.SalePrice\n","```"],"text/plain":["Solution: \n","```python\n","y = home_data.SalePrice\n","```"]},"metadata":{},"output_type":"display_data"}],"source":["step_1.solution()"]},{"cell_type":"code","execution_count":7,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:07:10.297427Z","iopub.status.busy":"2025-02-25T12:07:10.297082Z","iopub.status.idle":"2025-02-25T12:07:10.300894Z","shell.execute_reply":"2025-02-25T12:07:10.300287Z","shell.execute_reply.started":"2025-02-25T12:07:10.297367Z"}},"outputs":[],"source":["y = home_data.SalePrice"]},{"cell_type":"code","execution_count":8,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:07:30.327622Z","iopub.status.busy":"2025-02-25T12:07:30.327371Z","iopub.status.idle":"2025-02-25T12:07:30.332339Z","shell.execute_reply":"2025-02-25T12:07:30.331545Z","shell.execute_reply.started":"2025-02-25T12:07:30.327573Z"}},"outputs":[{"name":"stdout","output_type":"stream","text":["Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n","       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n","       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n","       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n","       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n","       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n","       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n","       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n","       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n","       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n","       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n","       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n","       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n","       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n","       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n","       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n","       'SaleCondition', 'SalePrice'],\n","      dtype='object')\n"]}],"source":["print(home_data.columns)"]},{"cell_type":"markdown","metadata":{},"source":["## Step 2: Create X\n","Now you will create a DataFrame called `X` holding the predictive features.\n","\n","Since you want only some columns from the original data, you'll first create a list with the names of the columns you want in `X`.\n","\n","You'll use just the following columns in the list (you can copy and paste the whole list to save some typing, though you'll still need to add quotes):\n","    * LotArea\n","    * YearBuilt\n","    * 1stFlrSF\n","    * 2ndFlrSF\n","    * FullBath\n","    * BedroomAbvGr\n","    * TotRmsAbvGrd\n","\n","After you've created that list of features, use it to create the DataFrame that you'll use to fit the model."]},{"cell_type":"code","execution_count":9,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:12:18.213388Z","iopub.status.busy":"2025-02-25T12:12:18.213086Z","iopub.status.idle":"2025-02-25T12:12:18.217773Z","shell.execute_reply":"2025-02-25T12:12:18.21691Z","shell.execute_reply.started":"2025-02-25T12:12:18.213335Z"}},"outputs":[],"source":["# List of selected features\n","feature_names = [\"LotArea\", \"YearBuilt\", \"1stFlrSF\", \"2ndFlrSF\", \"FullBath\", \"BedroomAbvGr\", \"TotRmsAbvGrd\"]"]},{"cell_type":"code","execution_count":10,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:12:21.720372Z","iopub.status.busy":"2025-02-25T12:12:21.720042Z","iopub.status.idle":"2025-02-25T12:12:21.727225Z","shell.execute_reply":"2025-02-25T12:12:21.726349Z","shell.execute_reply.started":"2025-02-25T12:12:21.720317Z"}},"outputs":[],"source":["# Create DataFrame with selected features\n","X = home_data[feature_names]"]},{"cell_type":"code","execution_count":11,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:12:41.548044Z","iopub.status.busy":"2025-02-25T12:12:41.547784Z","iopub.status.idle":"2025-02-25T12:12:41.555215Z","shell.execute_reply":"2025-02-25T12:12:41.554283Z","shell.execute_reply.started":"2025-02-25T12:12:41.547999Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"learnTutorialId\": 84, \"questionId\": \"2_SelectPredictionData\", \"learnToolsVersion\": \"0.2.2\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#33cc33\">Correct</span>"],"text/plain":["Correct"]},"metadata":{},"output_type":"display_data"}],"source":["step_2.check()"]},{"cell_type":"code","execution_count":12,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:12:59.089736Z","iopub.status.busy":"2025-02-25T12:12:59.089062Z","iopub.status.idle":"2025-02-25T12:12:59.096158Z","shell.execute_reply":"2025-02-25T12:12:59.095411Z","shell.execute_reply.started":"2025-02-25T12:12:59.089336Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"learnTutorialId\": 84, \"questionId\": \"2_SelectPredictionData\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#3366cc\">Hint:</span> Capitalization and spelling are important when specifying variable names. Use the brackets notation when specifying data for X."],"text/plain":["Hint: Capitalization and spelling are important when specifying variable names. Use the brackets notation when specifying data for X."]},"metadata":{},"output_type":"display_data"}],"source":["step_2.hint()"]},{"cell_type":"code","execution_count":13,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:13:16.88198Z","iopub.status.busy":"2025-02-25T12:13:16.881675Z","iopub.status.idle":"2025-02-25T12:13:16.888831Z","shell.execute_reply":"2025-02-25T12:13:16.888061Z","shell.execute_reply.started":"2025-02-25T12:13:16.881921Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"learnTutorialId\": 84, \"questionId\": \"2_SelectPredictionData\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#33cc99\">Solution:</span> \n","```python\n","feature_names = [\"LotArea\", \"YearBuilt\", \"1stFlrSF\", \"2ndFlrSF\",\n","                      \"FullBath\", \"BedroomAbvGr\", \"TotRmsAbvGrd\"]\n","\n","X=home_data[feature_names]\n","```"],"text/plain":["Solution: \n","```python\n","feature_names = [\"LotArea\", \"YearBuilt\", \"1stFlrSF\", \"2ndFlrSF\",\n","                      \"FullBath\", \"BedroomAbvGr\", \"TotRmsAbvGrd\"]\n","\n","X=home_data[feature_names]\n","```"]},"metadata":{},"output_type":"display_data"}],"source":["step_2.solution()"]},{"cell_type":"markdown","metadata":{},"source":["## Review Data\n"]},{"cell_type":"code","execution_count":14,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:19:48.028633Z","iopub.status.busy":"2025-02-25T12:19:48.028386Z","iopub.status.idle":"2025-02-25T12:19:48.06647Z","shell.execute_reply":"2025-02-25T12:19:48.065707Z","shell.execute_reply.started":"2025-02-25T12:19:48.028585Z"}},"outputs":[{"name":"stdout","output_type":"stream","text":["             LotArea    YearBuilt      ...       BedroomAbvGr  TotRmsAbvGrd\n","count    1460.000000  1460.000000      ...        1460.000000   1460.000000\n","mean    10516.828082  1971.267808      ...           2.866438      6.517808\n","std      9981.264932    30.202904      ...           0.815778      1.625393\n","min      1300.000000  1872.000000      ...           0.000000      2.000000\n","25%      7553.500000  1954.000000      ...           2.000000      5.000000\n","50%      9478.500000  1973.000000      ...           3.000000      6.000000\n","75%     11601.500000  2000.000000      ...           3.000000      7.000000\n","max    215245.000000  2010.000000      ...           8.000000     14.000000\n","\n","[8 rows x 7 columns]\n"]}],"source":["# Print summary statistics of X\n","print(X.describe())"]},{"cell_type":"code","execution_count":15,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:19:54.969208Z","iopub.status.busy":"2025-02-25T12:19:54.968911Z","iopub.status.idle":"2025-02-25T12:19:54.982685Z","shell.execute_reply":"2025-02-25T12:19:54.98161Z","shell.execute_reply.started":"2025-02-25T12:19:54.969135Z"}},"outputs":[{"name":"stdout","output_type":"stream","text":["   LotArea  YearBuilt      ...       BedroomAbvGr  TotRmsAbvGrd\n","0     8450       2003      ...                  3             8\n","1     9600       1976      ...                  3             6\n","2    11250       2001      ...                  3             6\n","3     9550       1915      ...                  3             7\n","4    14260       2000      ...                  4             9\n","\n","[5 rows x 7 columns]\n"]}],"source":["# Print the top few lines of X\n","print(X.head())"]},{"cell_type":"markdown","metadata":{},"source":["## Step 3: Specify and Fit Model\n","Create a `DecisionTreeRegressor` and save it iowa_model. Ensure you've done the relevant import from sklearn to run this command.\n","\n","Then fit the model you just created using the data in `X` and `y` that you saved above."]},{"cell_type":"code","execution_count":16,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:21:51.383693Z","iopub.status.busy":"2025-02-25T12:21:51.383396Z","iopub.status.idle":"2025-02-25T12:21:51.387342Z","shell.execute_reply":"2025-02-25T12:21:51.386563Z","shell.execute_reply.started":"2025-02-25T12:21:51.383638Z"}},"outputs":[],"source":["from sklearn.tree import DecisionTreeRegressor"]},{"cell_type":"code","execution_count":17,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:21:54.673234Z","iopub.status.busy":"2025-02-25T12:21:54.6729Z","iopub.status.idle":"2025-02-25T12:21:54.677529Z","shell.execute_reply":"2025-02-25T12:21:54.676129Z","shell.execute_reply.started":"2025-02-25T12:21:54.67317Z"}},"outputs":[],"source":["# Define the model\n","iowa_model = DecisionTreeRegressor(random_state=1)"]},{"cell_type":"code","execution_count":18,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:21:59.538442Z","iopub.status.busy":"2025-02-25T12:21:59.538095Z","iopub.status.idle":"2025-02-25T12:21:59.550578Z","shell.execute_reply":"2025-02-25T12:21:59.549753Z","shell.execute_reply.started":"2025-02-25T12:21:59.538387Z"}},"outputs":[{"data":{"text/plain":["DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n","           max_leaf_nodes=None, min_impurity_decrease=0.0,\n","           min_impurity_split=None, min_samples_leaf=1,\n","           min_samples_split=2, min_weight_fraction_leaf=0.0,\n","           presort=False, random_state=1, splitter='best')"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["# Fit the model\n","iowa_model.fit(X, y)"]},{"cell_type":"code","execution_count":19,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:22:29.379661Z","iopub.status.busy":"2025-02-25T12:22:29.379386Z","iopub.status.idle":"2025-02-25T12:22:29.386527Z","shell.execute_reply":"2025-02-25T12:22:29.385568Z","shell.execute_reply.started":"2025-02-25T12:22:29.379609Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"learnTutorialId\": 84, \"questionId\": \"3_CreateModel\", \"learnToolsVersion\": \"0.2.2\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#33cc33\">Correct</span>"],"text/plain":["Correct"]},"metadata":{},"output_type":"display_data"}],"source":["step_3.check()"]},{"cell_type":"code","execution_count":20,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:22:47.595687Z","iopub.status.busy":"2025-02-25T12:22:47.595445Z","iopub.status.idle":"2025-02-25T12:22:47.602346Z","shell.execute_reply":"2025-02-25T12:22:47.601609Z","shell.execute_reply.started":"2025-02-25T12:22:47.59565Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"learnTutorialId\": 84, \"questionId\": \"3_CreateModel\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#33cc99\">Solution:</span> \n","```python\n","from sklearn.tree import DecisionTreeRegressor\n","iowa_model = DecisionTreeRegressor(random_state=1)\n","iowa_model.fit(X, y)\n","```"],"text/plain":["Solution: \n","```python\n","from sklearn.tree import DecisionTreeRegressor\n","iowa_model = DecisionTreeRegressor(random_state=1)\n","iowa_model.fit(X, y)\n","```"]},"metadata":{},"output_type":"display_data"}],"source":["step_3.solution()"]},{"cell_type":"markdown","metadata":{},"source":["## Step 4: Make Predictions\n","Make predictions with the model's `predict` command using `X` as the data. Save the results to a variable called `predictions`."]},{"cell_type":"code","execution_count":21,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:23:45.383928Z","iopub.status.busy":"2025-02-25T12:23:45.383643Z","iopub.status.idle":"2025-02-25T12:23:45.388026Z","shell.execute_reply":"2025-02-25T12:23:45.387382Z","shell.execute_reply.started":"2025-02-25T12:23:45.383884Z"}},"outputs":[],"source":["predictions = iowa_model.predict(X)"]},{"cell_type":"code","execution_count":22,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:24:00.102536Z","iopub.status.busy":"2025-02-25T12:24:00.102283Z","iopub.status.idle":"2025-02-25T12:24:00.107851Z","shell.execute_reply":"2025-02-25T12:24:00.107095Z","shell.execute_reply.started":"2025-02-25T12:24:00.102489Z"}},"outputs":[{"name":"stdout","output_type":"stream","text":["[208500. 181500. 223500. ... 266500. 142125. 147500.]\n"]}],"source":["print(predictions)"]},{"cell_type":"code","execution_count":23,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:24:06.965397Z","iopub.status.busy":"2025-02-25T12:24:06.965106Z","iopub.status.idle":"2025-02-25T12:24:06.973891Z","shell.execute_reply":"2025-02-25T12:24:06.97287Z","shell.execute_reply.started":"2025-02-25T12:24:06.965359Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"learnTutorialId\": 84, \"questionId\": \"4_MakePredictions\", \"learnToolsVersion\": \"0.2.2\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#33cc33\">Correct</span>"],"text/plain":["Correct"]},"metadata":{},"output_type":"display_data"}],"source":["step_4.check()"]},{"cell_type":"code","execution_count":24,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:24:45.482739Z","iopub.status.busy":"2025-02-25T12:24:45.482137Z","iopub.status.idle":"2025-02-25T12:24:45.489713Z","shell.execute_reply":"2025-02-25T12:24:45.488893Z","shell.execute_reply.started":"2025-02-25T12:24:45.482648Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"learnTutorialId\": 84, \"questionId\": \"4_MakePredictions\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#3366cc\">Hint:</span> Use `iowa_model.predict` with an argument holding the data to predict with."],"text/plain":["Hint: Use `iowa_model.predict` with an argument holding the data to predict with."]},"metadata":{},"output_type":"display_data"}],"source":[" step_4.hint()"]},{"cell_type":"code","execution_count":25,"metadata":{"execution":{"iopub.execute_input":"2025-02-25T12:24:59.067308Z","iopub.status.busy":"2025-02-25T12:24:59.066897Z","iopub.status.idle":"2025-02-25T12:24:59.072556Z","shell.execute_reply":"2025-02-25T12:24:59.07193Z","shell.execute_reply.started":"2025-02-25T12:24:59.067112Z"}},"outputs":[{"data":{"application/javascript":["parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"learnTutorialId\": 84, \"questionId\": \"4_MakePredictions\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/markdown":["<span style=\"color:#33cc99\">Solution:</span> \n","```python\n","iowa_model.predict(X)\n","```"],"text/plain":["Solution: \n","```python\n","iowa_model.predict(X)\n","```"]},"metadata":{},"output_type":"display_data"}],"source":[" step_4.solution()"]},{"cell_type":"markdown","metadata":{},"source":[]},{"cell_type":"markdown","metadata":{},"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":111096,"sourceId":10211,"sourceType":"competition"},{"datasetId":2709,"sourceId":38454,"sourceType":"datasetVersion"}],"dockerImageVersionId":11105,"isGpuEnabled":false,"isInternetEnabled":false,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"}},"nbformat":4,"nbformat_minor":4}