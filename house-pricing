{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10211,"databundleVersionId":111096,"sourceType":"competition"},{"sourceId":38454,"sourceType":"datasetVersion","datasetId":2709}],"dockerImageVersionId":11105,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/kubraterz/exercise-your-first-machine-learning-model?scriptVersionId=224412708\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## Recap\n","metadata":{}},{"cell_type":"code","source":"# Code you have previously used to load data\nimport pandas as pd\n\n# Path of the file to read\niowa_file_path = '../input/home-data-for-ml-course/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\n\n# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex3 import *\n\nprint(\"Setup Complete\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T11:58:27.791812Z","iopub.execute_input":"2025-02-25T11:58:27.792094Z","iopub.status.idle":"2025-02-25T11:58:27.822998Z","shell.execute_reply.started":"2025-02-25T11:58:27.792032Z","shell.execute_reply":"2025-02-25T11:58:27.821854Z"}},"outputs":[{"name":"stderr","text":"WARNING:root:Ignoring repeated attempt to bind to globals\n","output_type":"stream"},{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"# Exercises\n\n## Step 1: Specify Prediction Target\nSelect the target variable, which corresponds to the sales price. Save this to a new variable called `y`. You'll need to print a list of the columns to find the name of the column you need.\n","metadata":{}},{"cell_type":"code","source":"# print the list of columns in the dataset to find the name of the prediction target\nprint(home_data.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:00:25.987651Z","iopub.execute_input":"2025-02-25T12:00:25.987893Z","iopub.status.idle":"2025-02-25T12:00:25.992356Z","shell.execute_reply.started":"2025-02-25T12:00:25.98785Z","shell.execute_reply":"2025-02-25T12:00:25.991551Z"}},"outputs":[{"name":"stdout","text":"Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition', 'SalePrice'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"#y \ny = home_data[\"SalePrice\"]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:04:32.429831Z","iopub.execute_input":"2025-02-25T12:04:32.430431Z","iopub.status.idle":"2025-02-25T12:04:32.433937Z","shell.execute_reply.started":"2025-02-25T12:04:32.430049Z","shell.execute_reply":"2025-02-25T12:04:32.433279Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"# for check in,\n# kontrol i√ßin\nstep_1.check()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:04:39.602837Z","iopub.execute_input":"2025-02-25T12:04:39.603096Z","iopub.status.idle":"2025-02-25T12:04:39.610766Z","shell.execute_reply.started":"2025-02-25T12:04:39.603037Z","shell.execute_reply":"2025-02-25T12:04:39.610126Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"learnTutorialId\": 84, \"questionId\": \"1_SetTarget\", \"learnToolsVersion\": \"0.2.2\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"# The lines below will show you a hint or the solution.\n# step_1.hint() \n# step_1.solution()\nstep_1.hint() \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:06:19.143046Z","iopub.execute_input":"2025-02-25T12:06:19.143341Z","iopub.status.idle":"2025-02-25T12:06:19.150529Z","shell.execute_reply.started":"2025-02-25T12:06:19.143302Z","shell.execute_reply":"2025-02-25T12:06:19.14969Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"learnTutorialId\": 84, \"questionId\": \"1_SetTarget\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Hint: Use `print(home_data.columns)`. The column you want is at the end of the list. Use the dot notation to pull out this column from the DataFrame","text/markdown":"<span style=\"color:#3366cc\">Hint:</span> Use `print(home_data.columns)`. The column you want is at the end of the list. Use the dot notation to pull out this column from the DataFrame"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"step_1.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:06:57.630941Z","iopub.execute_input":"2025-02-25T12:06:57.631225Z","iopub.status.idle":"2025-02-25T12:06:57.637747Z","shell.execute_reply.started":"2025-02-25T12:06:57.63118Z","shell.execute_reply":"2025-02-25T12:06:57.63669Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"learnTutorialId\": 84, \"questionId\": \"1_SetTarget\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\ny = home_data.SalePrice\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\ny = home_data.SalePrice\n```"},"metadata":{}}],"execution_count":12},{"cell_type":"code","source":"y = home_data.SalePrice","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:07:10.297082Z","iopub.execute_input":"2025-02-25T12:07:10.297427Z","iopub.status.idle":"2025-02-25T12:07:10.300894Z","shell.execute_reply.started":"2025-02-25T12:07:10.297367Z","shell.execute_reply":"2025-02-25T12:07:10.300287Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"print(home_data.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:07:30.327371Z","iopub.execute_input":"2025-02-25T12:07:30.327622Z","iopub.status.idle":"2025-02-25T12:07:30.332339Z","shell.execute_reply.started":"2025-02-25T12:07:30.327573Z","shell.execute_reply":"2025-02-25T12:07:30.331545Z"}},"outputs":[{"name":"stdout","text":"Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition', 'SalePrice'],\n      dtype='object')\n","output_type":"stream"}],"execution_count":14},{"cell_type":"markdown","source":"## Step 2: Create X\nNow you will create a DataFrame called `X` holding the predictive features.\n\nSince you want only some columns from the original data, you'll first create a list with the names of the columns you want in `X`.\n\nYou'll use just the following columns in the list (you can copy and paste the whole list to save some typing, though you'll still need to add quotes):\n    * LotArea\n    * YearBuilt\n    * 1stFlrSF\n    * 2ndFlrSF\n    * FullBath\n    * BedroomAbvGr\n    * TotRmsAbvGrd\n\nAfter you've created that list of features, use it to create the DataFrame that you'll use to fit the model.","metadata":{}},{"cell_type":"code","source":"# List of selected features\nfeature_names = [\"LotArea\", \"YearBuilt\", \"1stFlrSF\", \"2ndFlrSF\", \"FullBath\", \"BedroomAbvGr\", \"TotRmsAbvGrd\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:12:18.213086Z","iopub.execute_input":"2025-02-25T12:12:18.213388Z","iopub.status.idle":"2025-02-25T12:12:18.217773Z","shell.execute_reply.started":"2025-02-25T12:12:18.213335Z","shell.execute_reply":"2025-02-25T12:12:18.21691Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# Create DataFrame with selected features\nX = home_data[feature_names]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:12:21.720042Z","iopub.execute_input":"2025-02-25T12:12:21.720372Z","iopub.status.idle":"2025-02-25T12:12:21.727225Z","shell.execute_reply.started":"2025-02-25T12:12:21.720317Z","shell.execute_reply":"2025-02-25T12:12:21.726349Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"step_2.check()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:12:41.547784Z","iopub.execute_input":"2025-02-25T12:12:41.548044Z","iopub.status.idle":"2025-02-25T12:12:41.555215Z","shell.execute_reply.started":"2025-02-25T12:12:41.547999Z","shell.execute_reply":"2025-02-25T12:12:41.554283Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"learnTutorialId\": 84, \"questionId\": \"2_SelectPredictionData\", \"learnToolsVersion\": \"0.2.2\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}],"execution_count":17},{"cell_type":"code","source":"step_2.hint()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:12:59.089062Z","iopub.execute_input":"2025-02-25T12:12:59.089736Z","iopub.status.idle":"2025-02-25T12:12:59.096158Z","shell.execute_reply.started":"2025-02-25T12:12:59.089336Z","shell.execute_reply":"2025-02-25T12:12:59.095411Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"learnTutorialId\": 84, \"questionId\": \"2_SelectPredictionData\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Hint: Capitalization and spelling are important when specifying variable names. Use the brackets notation when specifying data for X.","text/markdown":"<span style=\"color:#3366cc\">Hint:</span> Capitalization and spelling are important when specifying variable names. Use the brackets notation when specifying data for X."},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"step_2.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:13:16.881675Z","iopub.execute_input":"2025-02-25T12:13:16.88198Z","iopub.status.idle":"2025-02-25T12:13:16.888831Z","shell.execute_reply.started":"2025-02-25T12:13:16.881921Z","shell.execute_reply":"2025-02-25T12:13:16.888061Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"learnTutorialId\": 84, \"questionId\": \"2_SelectPredictionData\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\nfeature_names = [\"LotArea\", \"YearBuilt\", \"1stFlrSF\", \"2ndFlrSF\",\n                      \"FullBath\", \"BedroomAbvGr\", \"TotRmsAbvGrd\"]\n\nX=home_data[feature_names]\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\nfeature_names = [\"LotArea\", \"YearBuilt\", \"1stFlrSF\", \"2ndFlrSF\",\n                      \"FullBath\", \"BedroomAbvGr\", \"TotRmsAbvGrd\"]\n\nX=home_data[feature_names]\n```"},"metadata":{}}],"execution_count":20},{"cell_type":"markdown","source":"## Review Data\n","metadata":{}},{"cell_type":"code","source":"# Print summary statistics of X\nprint(X.describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:19:48.028386Z","iopub.execute_input":"2025-02-25T12:19:48.028633Z","iopub.status.idle":"2025-02-25T12:19:48.06647Z","shell.execute_reply.started":"2025-02-25T12:19:48.028585Z","shell.execute_reply":"2025-02-25T12:19:48.065707Z"}},"outputs":[{"name":"stdout","text":"             LotArea    YearBuilt      ...       BedroomAbvGr  TotRmsAbvGrd\ncount    1460.000000  1460.000000      ...        1460.000000   1460.000000\nmean    10516.828082  1971.267808      ...           2.866438      6.517808\nstd      9981.264932    30.202904      ...           0.815778      1.625393\nmin      1300.000000  1872.000000      ...           0.000000      2.000000\n25%      7553.500000  1954.000000      ...           2.000000      5.000000\n50%      9478.500000  1973.000000      ...           3.000000      6.000000\n75%     11601.500000  2000.000000      ...           3.000000      7.000000\nmax    215245.000000  2010.000000      ...           8.000000     14.000000\n\n[8 rows x 7 columns]\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"# Print the top few lines of X\nprint(X.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:19:54.968911Z","iopub.execute_input":"2025-02-25T12:19:54.969208Z","iopub.status.idle":"2025-02-25T12:19:54.982685Z","shell.execute_reply.started":"2025-02-25T12:19:54.969135Z","shell.execute_reply":"2025-02-25T12:19:54.98161Z"}},"outputs":[{"name":"stdout","text":"   LotArea  YearBuilt      ...       BedroomAbvGr  TotRmsAbvGrd\n0     8450       2003      ...                  3             8\n1     9600       1976      ...                  3             6\n2    11250       2001      ...                  3             6\n3     9550       1915      ...                  3             7\n4    14260       2000      ...                  4             9\n\n[5 rows x 7 columns]\n","output_type":"stream"}],"execution_count":22},{"cell_type":"markdown","source":"## Step 3: Specify and Fit Model\nCreate a `DecisionTreeRegressor` and save it iowa_model. Ensure you've done the relevant import from sklearn to run this command.\n\nThen fit the model you just created using the data in `X` and `y` that you saved above.","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeRegressor","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:21:51.383396Z","iopub.execute_input":"2025-02-25T12:21:51.383693Z","iopub.status.idle":"2025-02-25T12:21:51.387342Z","shell.execute_reply.started":"2025-02-25T12:21:51.383638Z","shell.execute_reply":"2025-02-25T12:21:51.386563Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"# Define the model\niowa_model = DecisionTreeRegressor(random_state=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:21:54.6729Z","iopub.execute_input":"2025-02-25T12:21:54.673234Z","iopub.status.idle":"2025-02-25T12:21:54.677529Z","shell.execute_reply.started":"2025-02-25T12:21:54.67317Z","shell.execute_reply":"2025-02-25T12:21:54.676129Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# Fit the model\niowa_model.fit(X, y)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:21:59.538095Z","iopub.execute_input":"2025-02-25T12:21:59.538442Z","iopub.status.idle":"2025-02-25T12:21:59.550578Z","shell.execute_reply.started":"2025-02-25T12:21:59.538387Z","shell.execute_reply":"2025-02-25T12:21:59.549753Z"}},"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"DecisionTreeRegressor(criterion='mse', max_depth=None, max_features=None,\n           max_leaf_nodes=None, min_impurity_decrease=0.0,\n           min_impurity_split=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           presort=False, random_state=1, splitter='best')"},"metadata":{}}],"execution_count":25},{"cell_type":"code","source":"step_3.check()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:22:29.379386Z","iopub.execute_input":"2025-02-25T12:22:29.379661Z","iopub.status.idle":"2025-02-25T12:22:29.386527Z","shell.execute_reply.started":"2025-02-25T12:22:29.379609Z","shell.execute_reply":"2025-02-25T12:22:29.385568Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"learnTutorialId\": 84, \"questionId\": \"3_CreateModel\", \"learnToolsVersion\": \"0.2.2\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}],"execution_count":26},{"cell_type":"code","source":"step_3.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:22:47.595445Z","iopub.execute_input":"2025-02-25T12:22:47.595687Z","iopub.status.idle":"2025-02-25T12:22:47.602346Z","shell.execute_reply.started":"2025-02-25T12:22:47.59565Z","shell.execute_reply":"2025-02-25T12:22:47.601609Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"learnTutorialId\": 84, \"questionId\": \"3_CreateModel\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\nfrom sklearn.tree import DecisionTreeRegressor\niowa_model = DecisionTreeRegressor(random_state=1)\niowa_model.fit(X, y)\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\nfrom sklearn.tree import DecisionTreeRegressor\niowa_model = DecisionTreeRegressor(random_state=1)\niowa_model.fit(X, y)\n```"},"metadata":{}}],"execution_count":27},{"cell_type":"markdown","source":"## Step 4: Make Predictions\nMake predictions with the model's `predict` command using `X` as the data. Save the results to a variable called `predictions`.","metadata":{}},{"cell_type":"code","source":"predictions = iowa_model.predict(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:23:45.383643Z","iopub.execute_input":"2025-02-25T12:23:45.383928Z","iopub.status.idle":"2025-02-25T12:23:45.388026Z","shell.execute_reply.started":"2025-02-25T12:23:45.383884Z","shell.execute_reply":"2025-02-25T12:23:45.387382Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"print(predictions)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:24:00.102283Z","iopub.execute_input":"2025-02-25T12:24:00.102536Z","iopub.status.idle":"2025-02-25T12:24:00.107851Z","shell.execute_reply.started":"2025-02-25T12:24:00.102489Z","shell.execute_reply":"2025-02-25T12:24:00.107095Z"}},"outputs":[{"name":"stdout","text":"[208500. 181500. 223500. ... 266500. 142125. 147500.]\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"step_4.check()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:24:06.965106Z","iopub.execute_input":"2025-02-25T12:24:06.965397Z","iopub.status.idle":"2025-02-25T12:24:06.973891Z","shell.execute_reply.started":"2025-02-25T12:24:06.965359Z","shell.execute_reply":"2025-02-25T12:24:06.97287Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.25, \"interactionType\": 1, \"learnTutorialId\": 84, \"questionId\": \"4_MakePredictions\", \"learnToolsVersion\": \"0.2.2\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":" step_4.hint()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:24:45.482137Z","iopub.execute_input":"2025-02-25T12:24:45.482739Z","iopub.status.idle":"2025-02-25T12:24:45.489713Z","shell.execute_reply.started":"2025-02-25T12:24:45.482648Z","shell.execute_reply":"2025-02-25T12:24:45.488893Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 2, \"learnTutorialId\": 84, \"questionId\": \"4_MakePredictions\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Hint: Use `iowa_model.predict` with an argument holding the data to predict with.","text/markdown":"<span style=\"color:#3366cc\">Hint:</span> Use `iowa_model.predict` with an argument holding the data to predict with."},"metadata":{}}],"execution_count":31},{"cell_type":"code","source":" step_4.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-25T12:24:59.066897Z","iopub.execute_input":"2025-02-25T12:24:59.067308Z","iopub.status.idle":"2025-02-25T12:24:59.072556Z","shell.execute_reply.started":"2025-02-25T12:24:59.067112Z","shell.execute_reply":"2025-02-25T12:24:59.07193Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"learnTutorialId\": 84, \"questionId\": \"4_MakePredictions\", \"learnToolsVersion\": \"0.2.2\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\niowa_model.predict(X)\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\niowa_model.predict(X)\n```"},"metadata":{}}],"execution_count":33},{"cell_type":"markdown","source":"## Think About Your Results\n\nUse the `head` method to compare the top few predictions to the actual home values (in `y`) for those same homes. Anything surprising?\n\nYou'll understand why this happened if you keep going.","metadata":{}},{"cell_type":"markdown","source":"\n## Keep Going\nYou've built a decision tree model.  It's natural to ask how accurate the model's predictions will be and how you can improve that. Learn how to do that with **[Model Validation](https://www.kaggle.com/dansbecker/model-validation)**.\n\n---\n**[Course Home Page](https://www.kaggle.com/learn/machine-learning)**\n\n\n","metadata":{}}]}